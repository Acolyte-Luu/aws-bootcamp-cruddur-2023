AWSTemplateFormatVersion: "2010-09-09"

Description: |
  Task Definition
  Fargate Service
  Execution Role
  Task Role

Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of network components(VPC,subnets)
    Default: CruddurNetwork

  ClusterStack:
    Type: String
    Description: This is our base layer of infrastructure(ALB,TG,SG)
    Default: CruddurCluster

  ContainerName:
    Type: String
    Default: 'backend-flask'
  
  ContainerPort:
    Type: Number
    Default: 4567

  ServiceName:
    Type: String
    Default: 'backend-flask'

  EcrImage:
    Type: String
    Default: '713826515582.dkr.ecr.us-east-1.amazonaws.com/backend-flask'

  ServiceCpu:
    Type: String
    Default: '256'

  ServiceMemory:
    Type: String
    Default: '512'

  TaskFamily:
    Type: String
    Default: backend-flask

  EnvOTELServiceName:
    Type: String
    Default: 'backend-flask'

  EnvOTELExporterOTLPEndpoint:
    Type: String
    Default: 'https://api.honeycomb.io'

  EnvOTELAWSCognitoUserPoolId:
    Type: String
    Default: 'us-east-1_SUgtNavkQ'
  
  EnvOTELCognitoUserPoolClientId:
    Type: String
    Default: 'trsbt6en55cqbmrhrstr2mdcv'

  EnvFrontendURL:
    Type: String
    Default: '*'

  EnvBackendURL:
    Type: String
    Default: '*'

  SecretsAWSAccessKeyId:
    Type: String
    Default: 'arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/AWS_ACCESS_KEY_ID'

  SecretsSecretAccessKey:
    Type: String
    Default: 'arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/AWS_SECRET_ACCESS_KEY'

  SecretsConnectionUrl:
    Type: String
    Default: 'arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/CONNECTION_URL'

  SecretsRollbarAccessToken:
    Type: String
    Default: 'arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/ROLLBAR_ACCESS_TOKEN'

  SecretsOtelExporterOtlpHeaders:
    Type: String
    Default: 'arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/OTEL_EXPORTER_OTLP_HEADERS'

  #CruddurExecutionPolicy:
  #  Type: String
  #  Default: 'arn:aws:iam::713826515582:policy/CruddurServiceExecutionPolicy'

  CruddurExecutionRole:
    Type: String
    Default: 'arn:aws:iam::713826515582:role/CruddurServiceExecutionRole'

  CruddurTaskRole:
    Type: String
    Default: 'arn:aws:iam::713826515582:role/CruddurTaskRole'


Resources:
  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${ClusterStack}ClusterName"
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 0
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn:
            Fn::ImportValue:
              !Sub "${ClusterStack}BackendTGArn"
          ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${ClusterStack}ServiceSecurityGroupId"
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue:
                  !Sub "${NetworkingStack}PublicSubnetIds"
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: "cruddur"
        Services:
          - PortName: backend-flask
            DiscoveryName: backend-flask
            ClientAliases:
              - Port: !Ref ContainerPort
      #ServiceRegistries:
      #  - RegistryArn: !Sub 'arn::aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-cruddur-backend-flask'
      #    Port: !Ref ContainerPort
      #    ContainerName: 'backend-flask'
      #    ContainerPort: !Ref ContainerPort
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref TaskDefinition
  
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Ref TaskFamily
      ExecutionRoleArn: !Ref CruddurExecutionRole
      TaskRoleArn: !Ref CruddurTaskRole
      NetworkMode: "awsvpc"
      Cpu: !Ref ServiceCpu
      Memory: !Ref ServiceMemory
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions:
        - Name: "xray"
          Image: "public.ecr.aws/xray/aws-xray-daemon"
          Essential: true
          User: "1337"
          PortMappings:
            - Name: "xray"
              ContainerPort: 2000
              Protocol: "udp"
        - Name: "backend-flask"
          Image: !Ref EcrImage
          Essential: true
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "python /backend-flask/bin/flask/health-check"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          PortMappings:
            - Name: !Ref ContainerName
              ContainerPort: !Ref ContainerPort
              Protocol: "tcp"
              AppProtocol: "http"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: "cruddur"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: "OTEL_SERVICE_NAME"
              Value: !Ref EnvOTELServiceName
            - Name: "OTEL_EXPORTER_OTLP_ENDPOINT"
              Value: !Ref EnvOTELExporterOTLPEndpoint
            - Name: "AWS_COGNITO_USER_POOL_ID"
              Value: !Ref EnvOTELAWSCognitoUserPoolId
            - Name: "AWS_COGNITO_USER_POOL_CLIENT_ID"
              Value: !Ref EnvOTELCognitoUserPoolClientId
            - Name: "FRONTEND_URL"
              Value: !Ref EnvFrontendURL
            - Name: "BACKEND_URL"
              Value: !Ref EnvBackendURL
            - Name: "AWS_DEFAULT_REGION"
              Value: !Ref AWS::Region
          Secrets:
            - Name: "AWS_ACCESS_KEY_ID"
              ValueFrom: !Ref SecretsAWSAccessKeyId
            - Name: "AWS_SECRET_ACCESS_KEY"
              ValueFrom: !Ref SecretsSecretAccessKey
            - Name: "CONNECTION_URL"
              ValueFrom: !Ref SecretsConnectionUrl
            - Name: "ROLLBAR_ACCESS_TOKEN"
              ValueFrom: !Ref SecretsRollbarAccessToken
            - Name: "OTEL_EXPORTER_OTLP_HEADERS"
              ValueFrom: !Ref SecretsOtelExporterOtlpHeaders

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CruddurServiceExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'cruddur-execution-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: 'VisualEditor0'
                Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: "*"
              - Sid: 'VisualEditor1'
                Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/${ServiceName}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess


  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CruddurServiceTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'cruddur-task-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess


Outputs:
  ServiceName:
   Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub "${AWS::StackName}ServiceName"

#Remember to update connection url in parameter store with the new rds db created
