AWSTemplateFormatVersion: "2010-09-09"

Description: |
  Task Definition
  Fargate Service
  Execution Role
  Task Role

Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of network components(VPC,subnets)
    Default: CruddurNetwork

  ClusterStack:
    Type: String
    Description: This is our base layer of infrastructure(ALB,TG,SG)
    Default: CruddurCluster
  
  ContainerPort:
    Type: Number
    Default: 4567

  TaskFamily:
    Type: String
    Default: backend-flask

Resources:
  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ALBSG"
      GroupDescription: Public facing security group for our Cruddur ALB
      VpcId: 
        Fn::ImportValue:
          !Sub ${NetworkingStack}VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub ${ClusterStack}ALBSecurityGroupId
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: ALB HTTP

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
      DeploymentConfiguration:
      DeploymentContainer:
      DesiredCount:
      EnableECSManagedTags: true
      EnableExecuteCommnad: true
      HealthCheckGracePeriodSeconds:
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: "arn:aws:elasticloadbalancing:us-east-1:713826515582:targetgroup/cruddur-backend-flask-tg/12a1311b2dd9cc43"
          ContainerName: 'backend-flask'
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSG.GroupId
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue:
                  !Sub "${NetworkingStack}PublicSubnetIds"
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      ServiceRegistries:
        - RegistryArn: !Sub 'arn::aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-cruddur-backend-flask'
          Port: !Ref ContainerPort
          ContainerName: 'backend-flask'
          ContainerPort: !Ref ContainerPort
      ServiceName: !Ref TaskFamily
      TaskDefinition: !Ref TaskFamily
  

  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Ref TaskFamily
      ExecutionRoleArn: "arn:aws:iam::713826515582:role/CruddurServiceExecutionRole"
      TaskRoleArn: "arn:aws:iam::713826515582:role/CruddurTaskRole"
      NetworkMode: "awsvpc"
      Cpu: "256"
      Memory: "512"
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions:
        - Name: "xray"
          Image: "public.ecr.aws/xray/aws-xray-daemon"
          Essential: true
          User: "1337"
          PortMappings:
            - Name: "xray"
              ContainerPort: 2000
              Protocol: "udp"
        - Name: "backend-flask"
          Image: "713826515582.dkr.ecr.us-east-1.amazonaws.com/backend-flask"
          Essential: true
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "python /backend-flask/bin/flask/health-check"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          PortMappings:
            - Name: "backend-flask"
              ContainerPort: 4567
              Protocol: "tcp"
              AppProtocol: "http"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: "cruddur"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: "backend-flask"
          Environment:
            - Name: "OTEL_SERVICE_NAME"
              Value: "backend-flask"
            - Name: "OTEL_EXPORTER_OTLP_ENDPOINT"
              Value: "https://api.honeycomb.io"
            - Name: "AWS_COGNITO_USER_POOL_ID"
              Value: "us-east-1_SUgtNavkQ"
            - Name: "AWS_COGNITO_USER_POOL_CLIENT_ID"
              Value: "trsbt6en55cqbmrhrstr2mdcv"
            - Name: "FRONTEND_URL"
              Value: "https://acolyteluu.cloud"
            - Name: "BACKEND_URL"
              Value: "https://api.acolyteluu.cloud"
            - Name: "AWS_DEFAULT_REGION"
              Value: "us-east-1"
          Secrets:
            - Name: "AWS_ACCESS_KEY_ID"
              ValueFrom: "arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/AWS_ACCESS_KEY_ID"
            - Name: "AWS_SECRET_ACCESS_KEY"
              ValueFrom: "arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/AWS_SECRET_ACCESS_KEY"
            - Name: "CONNECTION_URL"
              ValueFrom: "arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/CONNECTION_URL"
            - Name: "ROLLBAR_ACCESS_TOKEN"
              ValueFrom: "arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/ROLLBAR_ACCESS_TOKEN"
            - Name: "OTEL_EXPORTER_OTLP_HEADERS"
              ValueFrom: "arn:aws:ssm:us-east-1:713826515582:parameter/cruddur/backend-flask/OTEL_EXPORTER_OTLP_HEADERS"


